%toc 目录

----
== function ==
{{{
1. AT Command透传
2. Diag帧的解析过滤(to AP or CP),
   其中涉及到AP侧的功能:
   a. WIFI/BT addr 读写
   b. wifi/bt校准
   c. IMEI(如果存储在AP侧)的读写
   d. SN的读写
   e. ADC等校准
   f. Audio/Mediaplayer相关功能的调校
   g. 获取手机版本/恢复出厂设置操作
   h. AutoTest功能;
   i. phasecheck的读写;
   j. 控制手机进入deepsleep/关闭手机等操作
   k. gps相关信息的输出;
   l.某些被封装成DIag帧的AT 的处理，如AT+SENDKEY/AT+GETICH?/AT+ETSRESET等(eng_cmd4linuxhdlr.c)
3．Arm log的抓取(SS新需求)
}}}

----
== architecture ==
* engpc整个数据传输流程大致如下
{{local:images/engmode.png}}</BR>
0. PC工具通过uart将数据传递给engpc
0. engpc通过sipc将数据传递给CP
0. CP再通过sipc将数据传递给engpc
0. engpc再通过uart将数据传递给PC工具
PC与engpc的传输通道(uart)：/dev/ttyS1</BR>
CP与engpc的传输通道：/dev/slog_lte</BR>
</BR>
ap与cp之间有at、diag、log这些通道。</BR>
pc与ap如果用usb的话，也会有at、diag、log口，其中at和diag口必须区分开，log和diag口可以复用；</BR>
如果是uart的话，那就只有uart口。</BR>
at通道发的是裸数据，diag通道会加上头和尾(0x7e)，加上类型等数据。cp会根据是从哪个通道过来的进行不同的处理。</BR>
工具会决定用at口还是diag口。</BR>
ttyGS0/1/2代表usb的at、diag、log口；ttyS1代表uart</BR>
</BR>
* engpc USB
{{local:images/engpc_usb.png}}

== 配置 ==
=== engpc ===
==== PC <-> engpc ====
* 如果是USB连接
{{{
在device/sprd/scx35/init.sc8830.rc里定义
service engpcclientlte /system/bin/engpc -p l -a /dev/ttyGS5 -d /dev/ttyGS6 -l /dev/ttyGS7
-p：类型
-a：at口
-d：diag口
-l：log口
}}}
_以scx35为例，列举当前的端口分配_
|*类型*|*AT口*|*DIAG口*|*log口*|
|t|ttyGS0|ttyGS1|ttyGS4|
|l|ttyGS5|ttyGS6|ttyGS7|
|wcn|ttyGS2|ttyGS3| |
|w|ttyGS0|ttyGS1|ttyGS4|
|tl|ttyGS5|ttyGS6|ttyGS7|
|lf|ttyGS5|ttyGS6|ttyGS7|

* 如果是UART连接
{{{
写死在vendor/sprd/open-source/apps/engmode/eng_pcclient.c里
int main (int argc, char** argv)
{
        if(CONNECT_UART == cmdparam.connect_type){
            strcpy(dev_info.host_int.dev_diag, "/dev/ttyS1");             // 只用/dev/ttyS1
            dev_info.host_int.dev_type = CONNECT_UART;
        }   
}
}}}

==== CP <-> engpc ====
{{{
在device/sprd/scx35l_coreprimelite/system.prop定义
ro.modem.tl.diag=/dev/slog_lte
ro.modem.tl.log=/dev/slog_lte
}}}

=== kernel ===
{{{
    slog_lte {
        compatible = "sprd,spipe";
        sprd,name = "slog_lte";
        sprd,dst = <5>; 
        sprd,channel = <5>; 
        sprd,ringnr = <1>; 
        sprd,size-rxbuf = <0x40000>; /* 256*1024*/
        sprd,size-txbuf = <0x8000>; /* 32*1024 */
    };   
}}}

== 代码阅读 ==
=== vlog.c ===
粗略流程
{{{
void *eng_vlog_thread(void *x) 
{
    ser_fd = eng_open_dev(dev_info->host_int.dev_log, O_WRONLY);
    modem_fd = open(dev_info->modem_int.log_chan, O_RDONLY);
    while(1) {
        r_cnt = read(modem_fd, log_data, DATA_BUF_SIZE);
        do {
                w_cnt = write(ser_fd, log_data + offset, r_cnt);
        } while(r_cnt > 0);
    }
}
}}}

=== vdiag.c ===
粗略流程
{{{
void *eng_vdiag_wthread(void *x) 
{
    ser_fd = eng_open_dev(dev_info->host_int.dev_diag, O_RDONLY);
    modem_fd = open(dev_info->modem_int.diag_chan, O_WRONLY);

    while(1) {
        r_cnt = read(ser_fd, log_data, DATA_BUF_SIZE/2);
        do {
            w_cnt = write(modem_fd, backup_data_buf + offset, backup_data_len);
        }while(backup_data_len >0);
    }           
}
}}}

== 调试经验 ==
=== 校准模式将adb使能 ===
{{{
diff --git a/scx35/recovery/init.rc b/scx35/recovery/init.rc
index b4595a3..a81d98b 100644
--- a/scx35/recovery/init.rc
+++ b/scx35/recovery/init.rc
@@ -123,6 +123,7 @@ on cali
     class_start cali
     insmod /system/lib/modules/mali.ko
     insmod /system/lib/modules/trout_fm.ko
+    trigger adb_enable
}}}

=== PC -> kernel ===
通过在串口驱动的读数据里加打印，看工具是否给AP发了数据
{{{
$ git diff ../tty/serial/serial_sprd_dt.c
diff --git a/drivers/tty/serial/serial_sprd_dt.c b/drivers/tty/serial/serial_sprd_dt.c
index bd033ef..583f475 100644
--- a/drivers/tty/serial/serial_sprd_dt.c
+++ b/drivers/tty/serial/serial_sprd_dt.c
@@ -208,6 +208,8 @@ static inline void serial_sprd_rx_chars(int irq, void *dev_id)
                flag = TTY_NORMAL;
                port->icount.rx++;
 
+printk("%02x(%c) ", ch, ch);
+
                if (unlikely(lsr &
                             (UART_LSR_BI | UART_LSR_PE | UART_LSR_FE |
                              UART_LSR_OE))) {
@@ -248,6 +250,7 @@ ignore_char:
                status = serial_in(port, ARM_UART_STS1);
                lsr = serial_in(port, ARM_UART_STS0);
        }
+printk("\n");
        //tty->low_latency = 1;
        tty_flip_buffer_push(tty);
 }
}}}

=== CP <-> kernel ===
在SPIPE里加打印，看CP与kernel间是否有数据传输
{{{
$ git diff spipe.c
diff --git a/drivers/sipc/spipe.c b/drivers/sipc/spipe.c
index 0cee34fb..5218273 100644
--- a/drivers/sipc/spipe.c
+++ b/drivers/sipc/spipe.c
@@ -76,18 +76,34 @@ static int spipe_release(struct inode *inode, struct file *filp)
        return 0;
 }
 
+void print_buf(char* buf, int len)
+{
+       int i;
+       for (i = 0; i < len; i++)
+               printk("%x ", buf[i]);
+       printk("\n");
+}
+
 static ssize_t spipe_read(struct file *filp,
                char __user *buf, size_t count, loff_t *ppos)
 {
        struct spipe_sbuf *sbuf = filp->private_data;
        int timeout = -1;
+       ssize_t mysize;
 
        if (filp->f_flags & O_NONBLOCK) {
                timeout = 0;
        }
 
-       return sbuf_read(sbuf->dst, sbuf->channel, sbuf->bufid,
+       mysize = sbuf_read(sbuf->dst, sbuf->channel, sbuf->bufid,
                        (void *)buf, count, timeout);
+
+if (sbuf->dst == 5 && sbuf->channel == 5) {
+       printk("%s: ", __FUNCTION__);
+       print_buf(buf, mysize);
+}
+
+       return mysize;
 }
 
 static ssize_t spipe_write(struct file *filp,
@@ -95,13 +111,21 @@ static ssize_t spipe_write(struct file *filp,
 {
        struct spipe_sbuf *sbuf = filp->private_data;
        int timeout = -1;
+       ssize_t mysize;
 
        if (filp->f_flags & O_NONBLOCK) {
                timeout = 0;
        }
 
-       return sbuf_write(sbuf->dst, sbuf->channel, sbuf->bufid,
+       mysize = sbuf_write(sbuf->dst, sbuf->channel, sbuf->bufid,
                        (void *)buf, count, timeout);
+
+if (sbuf->dst == 5 && sbuf->channel == 5) {
+       printk("%s: ", __FUNCTION__);
+       print_buf(buf, mysize);
+}
+
+       return mysize;
 }
}}}

== 相关文件 ==
|*文件*|*作用*|*关键函数*|
|kernel/drivers/sipc/spipe.c|AP <-> CP数据传输|spipe_read/spipe_write|
|kernel/drivers/tty/serial/serial_sprd_dt.c|PC <-> AP数据传输(uart)|serial_sprd_rx_chars|
|arch/arm/boot/dts/sprd-scx35l_coreprimelite.dts|spipe通道定义| |
|vendor/sprd/open-source/apps/engmode/vdiag.c|PC <-> engpc数据传输|eng_vdiag_wthread|
|vendor/sprd/open-source/apps/engmode/vlog.c|CP <-> engpc数据传输|eng_vdiag_rthread|
|device/sprd/scx35l_coreprimelite/system.prop|CP <-> engpc通道定义| |
|device/sprd/scx35/init.sc8830.rc|PC <-> engpc通道定义| |

----
== 附件 ==
[[local:files/calibration_spipe_log.patch|calibration_spipe_log.patch]]
