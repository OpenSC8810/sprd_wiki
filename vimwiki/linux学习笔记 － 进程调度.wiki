%toc 目录
----

=== 调度时机 ===
{{{
Linux在众多进程中是怎么进行调度的，这个牵涉到Linux进程调度时机的概念，由Linux内核中Schedule（）的函数来决定是否要进行进程的切换，如果要切换的话，切换到哪个进程等等。

Linux进程调度时机主要有：
1、进程状态转换的时刻：进程终止、进程睡眠；
2、当前进程的时间片用完时（current->counter=0）；
3、设备驱动程序
4、进程从中断、异常及系统调用返回到用户态时；

时机1，进程要调用sleep（）或exit（）等函数进行状态转换，这些函数会主动调用调度程序进行进程调度；
时机2，由于进程的时间片是由时钟中断来更新的，因此，这种情况和时机4是一样的。
时机3，当设备驱动程序执行长而重复的任务时，直接调用调度程序。在每次反复循环中，驱动程序都检查need_resched的值，如果必要，则调用调度程序schedule()主动放弃CPU。
时机4，如前所述，不管是从中断、异常还是系统调用返回，最终都调用ret_from_sys_call（），由这个函数进行调度标志的检测，如果必要，则调用调用调度程序。
     那么，为什么从系统调用返回时要调用调度程序呢？这当然是从效率考虑。从系统调用返回意味着要离开内核态而返回到用户态，而状态的转换要花费一定的时间，因此，在返回到用户态前，系统把在内核态该处理的事全部做完。
}}}

=== Linux任务状态转换 ===
==== Linux进程状态 ====
{{{
linux上进程有5种状态: 
1. 运行(正在运行或在运行队列中等待) 
2. 中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号) 
3. 不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生) 
4. 僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放) 
5. 停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)

ps工具标识进程的5种状态码: 
D 不可中断 uninterruptible sleep (usually IO) 
R 运行 runnable (on run queue) 
S 中断 sleeping 
T 停止 traced or stopped 
Z 僵死 a defunct ("zombie") process

注: 其它状态还包括W(无驻留页), <(高优先级进程), N(低优先级进程), L(内存锁页).  
}}}

===== 可执行状态 R (TASK_RUNNING) =====
{{{
只有在该状态的进程才可能在CPU上运行。
而同一时刻可能有多个进程处于可执行状态，这些进程的task_struct结构（进程控制块）被放入对应CPU的可执行队列中（一个进程最多只能出现在一个CPU的可执行队列中）。
进程调度器的任务就是从各个CPU的可执行队列中分别选择一个进程在该CPU上运行。

很多操作系统教科书将正在CPU上执行的进程定义为RUNNING状态、而将可执行但是尚未被调度执行的进程定义为READY状态，这两种状态在linux下统一为 TASK_RUNNING状态。
}}}

===== 可中断的睡眠状态 S (TASK_INTERRUPTIBLE) =====
{{{
处于这个状态的进程因为等待某某事件的发生（比如等待socket连接、等待信号量），而被挂起。
这些进程的task_struct结构被放入对应事件的等待队列中。
当这些事件发生时（由外部中断触发、或由其他进程触发），对应的等待队列中的一个或多个进程将被唤醒。

通过ps命令我们会看到，一般情况下，进程列表中的绝大多数进程都处于TASK_INTERRUPTIBLE状态（除非机器的负载很高）。
毕竟CPU就这么一两个，进程动辄几十上百个，如果不是绝大多数进程都在睡眠，CPU又怎么响应得过来。
}}}

===== 不可中断的睡眠状态 D (TASK_UNINTERRUPTIBLE) =====
{{{
与TASK_INTERRUPTIBLE状态类似，进程处于睡眠状态，但是此刻进程是不可中断的。不可中断，指的并不是CPU不响应外部硬件的中断，而是指进程不响应异步信号。
绝大多数情况下，进程处在睡眠状态时，总是应该能够响应异步信号的。否则你将惊奇的发现，kill -9竟然杀不死一个正在睡眠的进程了！于是我们也很好理解，为什么ps命令看到的进程几乎不会出现TASK_UNINTERRUPTIBLE状态，而总是TASK_INTERRUPTIBLE状态。

而TASK_UNINTERRUPTIBLE状态存在的意义就在于，内核的某些处理流程是不能被打断的。
如果响应异步信号，程序的执行流程中就会被插入一段用于处理异步信号的流程（这个插入的流程可能只存在于内核态，也可能延伸到用户态），于是原有的流程就被中断了。（参见《linux内核异步中断浅析》）
在进程对某些硬件进行操作时（比如进程调用read系统调用对某个设备文件进行读操作，而read系统调用最终执行到对应设备驱动的代码，并与对应的物理设备进行交互），可能需要使用TASK_UNINTERRUPTIBLE状态对进程进行保护，以避免进程与设备交互的过程被打断，造成设备陷入不可控的状态。这种情况下的TASK_UNINTERRUPTIBLE状态总是非常短暂的，通过ps命令基本上不可能捕捉到。

linux系统中也存在容易捕捉的TASK_UNINTERRUPTIBLE状态。执行vfork系统调用后，父进程将进入TASK_UNINTERRUPTIBLE状态，直到子进程调用exit或exec（参见《神奇的vfork》）。
通过下面的代码就能得到处于TASK_UNINTERRUPTIBLE状态的进程：

#include
void main() {
if (!vfork()) sleep(100);
}
编译运行，然后ps一下：

kouu@kouu-one:~/test$ ps -ax | grep a\.out
4371 pts/0    D+     0:00 ./a.out
4372 pts/0    S+     0:00 ./a.out
4374 pts/1    S+     0:00 grep a.out
然后我们可以试验一下TASK_UNINTERRUPTIBLE状态的威力。不管kill还是kill -9，这个TASK_UNINTERRUPTIBLE状态的父进程依然屹立不倒。
}}}

===== 暂停状态或跟踪状态 T (TASK_STOPPED or TASK_TRACED) =====
{{{
向进程发送一个SIGSTOP信号，它就会因响应该信号而进入TASK_STOPPED状态（除非该进程本身处于TASK_UNINTERRUPTIBLE状态而不响应信号）。
（SIGSTOP与SIGKILL信号一样，是非常强制的。不允许用户进程通过signal系列的系统调用重新设置对应的信号处理函数。）
向进程发送一个SIGCONT信号，可以让其从TASK_STOPPED状态恢复到TASK_RUNNING状态。

当进程正在被跟踪时，它处于TASK_TRACED这个特殊的状态。
“正在被跟踪”指的是进程暂停下来，等待跟踪它的进程对它进行操作。
比如在gdb中对被跟踪的进程下一个断点，进程在断点处停下来的时候就处于TASK_TRACED状态。
而在其他时候，被跟踪的进程还是处于前面提到的那些状态。

对于进程本身来说，TASK_STOPPED和TASK_TRACED状态很类似，都是表示进程暂停下来。
而TASK_TRACED状态相当于在TASK_STOPPED之上多了一层保护，处于TASK_TRACED状态的进程不能响应SIGCONT信号而被唤醒。
只能等到调试进程通过ptrace系统调用执行PTRACE_CONT、PTRACE_DETACH等操作（通过ptrace系统调用的参数指定操作），或调试进程退出，被调试的进程才能恢复TASK_RUNNING状态。
}}}

===== 退出状态，进程成为僵尸进程 Z (TASK_DEAD – EXIT_ZOMBIE) =====
{{{
进程在退出的过程中，处于TASK_DEAD状态。

在这个退出过程中，进程占有的所有资源将被回收，除了task_struct结构（以及少数资源）以外。于是进程就只剩下task_struct这么个空壳，故称为僵尸。
之所以保留task_struct，是因为task_struct里面保存了进程的退出码、以及一些统计信息。而其父进程很可能会关心这些信息。
比如在shell中，$?变量就保存了最后一个退出的前台进程的退出码，而这个退出码往往被作为if语句的判断条件。
当然，内核也可以将这些信息保存在别的地方，而将task_struct结构释放掉，以节省一些空间。
但是使用task_struct结构更为方便，因为在内核中已经建立了从pid到task_struct查找关系，还有进程间的父子关系。释放掉task_struct，则需要建立一些新的数据结构，以便让父进程找到它的子进程的退出信息。

父进程可以通过wait系列的系统调用（如wait4、waitid）来等待某个或某些子进程的退出，并获取它的退出信息。然后wait系列的系统调用会顺便将子进程的尸体（task_struct）也释放掉。
子进程在退出的过程中，内核会给其父进程发送一个信号，通知父进程来“收尸”。这个信号默认是SIGCHLD，但是在通过clone系统调用创建子进程时，可以设置这个信号。

通过下面的代码能够制造一个EXIT_ZOMBIE状态的进程：

#include
void main() {
if (fork())
while(1) sleep(100);
}
编译运行，然后ps一下：

kouu@kouu-one:~/test$ ps -ax | grep a\.out
10410 pts/0    S+     0:00 ./a.out
10411 pts/0    Z+     0:00 [a.out]
10413 pts/1    S+     0:00 grep a.out
只要父进程不退出，这个僵尸状态的子进程就一直存在。那么如果父进程退出了呢，谁又来给子进程“收尸”？
当进程退出的时候，会将它的所有子进程都托管给别的进程（使之成为别的进程的子进程）。
托管给谁呢？可能是退出进程所在进程组的下一个进程（如果存在的话），或者是1号进程。所以每个进程、每时每刻都有父进程存在。除非它是1号进程。

1号进程，pid为1的进程，又称init进程。
linux系统启动后，第一个被创建的用户态进程就是init进程。它有两项使命：
1、执行系统初始化脚本，创建一系列的进程（它们都是init进程的子孙）；
2、在一个死循环中等待其子进程的退出事件，并调用waitid系统调用来完成“收尸”工作；
init进程不会被暂停、也不会被杀死（这是由内核来保证的）。它在等待子进程退出的过程中处于TASK_INTERRUPTIBLE状态，“收尸”过程中则处于TASK_RUNNING状态。
}}}

===== 退出状态，进程即将被销毁 X (TASK_DEAD – EXIT_DEAD) =====
{{{
而进程在退出过程中也可能不会保留它的task_struct。
比如这个进程是多线程程序中被detach过的进程（进程？线程？参见《linux线程浅析》）。
或者父进程通过设置SIGCHLD信号的handler为SIG_IGN，显式的忽略了SIGCHLD信号。（这是posix的规定，尽管子进程的退出信号可以被设置为SIGCHLD以外的其他信号。）
此时，进程将被置于EXIT_DEAD退出状态，这意味着接下来的代码立即就会将该进程彻底释放。所以EXIT_DEAD状态是非常短暂的，几乎不可能通过ps命令捕捉到。
}}}

==== 进程的初始状态 ====
{{{
进程是通过fork系列的系统调用（fork、clone、vfork）来创建的，内核（或内核模块）也可以通过kernel_thread函数创建内核进程。
这些创建子进程的函数本质上都完成了相同的功能——将调用进程复制一份，得到子进程。（可以通过选项参数来决定各种资源是共享、还是私有。）
那么既然调用进程处于TASK_RUNNING状态（否则，它若不是正在运行，又怎么进行调用？），则子进程默认也处于TASK_RUNNING状态。
另外，在系统调用调用clone和内核函数kernel_thread也接受CLONE_STOPPED选项，从而将子进程的初始状态置为 TASK_STOPPED。
}}}

==== linux状态转换图 ====
{{local:images/linux_task_schedule.jpg}}

=== task创建与销毁 ===
==== 创建 ====
{{local:images/linux_kernel_task_create.gif}}</BR>
{{{
在Linux中，进程的创建由系统调用fork和vfork完成。它们生成一个子进程并且子进程是父进程的一个复制品。
  Fork系统调用对应的kernel函数是sys_fork，此函数简单的调用kernel函数do_fork。一个简化版的do_fork执行如下：
(1)alloc_pid()。给新的进程分配一个新的pid，即进程号
(2)copy_process()此函数会做fork的大部分事情，它主要完成讲父进程的运行环境复制到新的子进程，比如信号处理、文件描述符和进程的代码数据等。
(3)wake_up_new_task()。计算此进程的优先级和其他调度参数，将新的进程加入到进程调度队列并设此进程为可被调度的，以后这个进程可以被进程调度模块调度执行。
 
  简化的copy_process()流程：
(1)dup_task_struct()。分配一个新的进程控制块，包括新进程在kernel中的堆栈。新的进程控制块会复制父进程的进程控制块，但是因为每个进程都有一个kernel堆栈，新进程的堆栈将被设置成新分配的堆栈。
(2)初始化一些新进程的统计信息，如此进程的运行时间
(3)copy_semundo()复制父进程的semaphore undo_list到子进程。
(4)copy_files()、copy_fs()。复制父进程文件系统相关的环境到子进程
(5)copy_sighand()、copy_signal()。复制父进程信号处理相关的环境到子进程。
(6)copy_mm()。复制父进程内存管理相关的环境到子进程，包括页表、地址空间和代码数据。
(7)copy_thread()。设置子进程的执行环境，如子进程运行时各CPU寄存器的值、子进程的kernel栈的起始地址。
(8)sched_fork()。设置子进程调度相关的参数，即子进程的运行CPU、初始时间片长度和静态优先级等。
(9)将子进程加入到全局的进程队列中
(10)设置子进程的进程组ID和对话期ID等。
简单的说，copy_process()就是将父进程的运行环境复制到子进程并对某些子进程特定的环境做相应的调整。
}}}

==== 销毁 ====
{{local:images/linux_kernel_task_destroy.gif}}</BR>
{{{
   应用程序使用系统调用exit()来结束一个进程，此系统调用接受一个退出原因代码，父进程可以使用wait()系统调用来获取此代码，从而知道子进程退出的原因。对应到kernel，此系统调用sys_exit_group()，它的基本流程如下：
(1)将信号SIGKILL加入到其他线程的信号队列中，并唤醒这些线程。
(2)此线程执行do_exit()来退出。
do_exit()完成线程退出的任务，其主要功能是将线程占用的系统资源释放，do_exit()的基本流程如下：
(1)将进程内存管理相关的资源释放
(2)将进程ICP semaphore相关资源释放
(3)__exit_files()、__exit_fs()。将进程文件管理相关的资源释放。
(4)exit_thread()。只要目的是释放平台相关的一些资源。
(5)exit_notify()。在Linux中进程退出时要将其退出的原因告诉父进程，父进程调用wait()系统调用后会在一个等待队列上睡眠。
(6)schedule()。调用进程调度器，因为此进程已经退出，切换到其他进程。
}}}

=== CFS进程调度 ===
{{local:images/cfs_sched.gif}}

=== worker ===
==== kernel worker name ====
{{{
它在kernel/kernel/workqueue.c的create_worker里创建

内核里的worker，以kworker为前缀，后面带有2个数据
前面的数字，若不带u，则表示固定在某个cpu上，否则，表示不固定

static struct worker *create_worker(struct worker_pool *pool)
{
...
    if (pool->cpu >= 0)
        snprintf(id_buf, sizeof(id_buf), "%d:%d%s", pool->cpu, id,
             pool->attrs->nice < 0  ? "H" : "");
    else
        snprintf(id_buf, sizeof(id_buf), "u%d:%d", pool->id, id);

    worker->task = kthread_create_on_node(worker_thread, worker, pool->node,
                          "kworker/%s", id_buf);
...
}
}}}

=== 调试经验 ===
==== T32中看数据概况 ====
{{local:images/runqueue_runnable_task.PNG}}

==== task状态 ====
{{{
task_struct的state为当前task的状态
0：R
1：S
2：D

kernel/include/linux/sched.h定义了task的状态
#define TASK_RUNNING        0
#define TASK_INTERRUPTIBLE  1
#define TASK_UNINTERRUPTIBLE    2
#define __TASK_STOPPED      4
#define __TASK_TRACED       8
/* in tsk->exit_state */
#define EXIT_ZOMBIE     16
#define EXIT_DEAD       32
/* in tsk->state again */
#define TASK_DEAD       64
#define TASK_WAKEKILL       128
#define TASK_WAKING     256
#define TASK_PARKED     512
#define TASK_STATE_MAX      1024

}}}

=== 参考资料 ===
[[http://www.cnblogs.com/zhaoyl/archive/2012/09/04/2671156.html|Linux进程调度原理]]</BR>
[[http://os.51cto.com/art/201003/187407.htm|详细剖析Linux进程调度时机]]</BR>
[[http://bbs.chinaunix.net/thread-703286-1-1.html|Linux进程调度笔记]]</BR>
[[http://www.cnblogs.com/sunshinewill/archive/2013/03/05/2943872.html|Linux进程调度和切换过程分析]]</BR>

--

CFS调度:</BR>
[[http://www.cnblogs.com/openix/archive/2013/08/13/3254394.html|linux cfs调度器_理论模型]]</BR>
[[http://blog.csdn.net/zhoudaxia/article/details/7375668|Linux进程调度(1)：CFS调度器的设计框架]]</BR>
[[http://blog.csdn.net/zhoudaxia/article/details/7375780|Linux进程调度(2)：CFS调度操作]]</BR>
[[http://blog.csdn.net/zhoudaxia/article/details/7375836|Linux进程调度(3)：进程切换分析]]</BR>
[[http://blog.csdn.net/arriod/article/details/7033895|CFS进程调度]]</BR>
[[http://m.blog.chinaunix.net/uid-26611383-id-3789974.html|Linux进程调度CFS算法实现分析]]</BR>
[[http://www.ibm.com/developerworks/cn/linux/l-cfs/|使用完全公平调度程序（CFS）进行多任务处理]]</BR>

