%toc 目录
_Take SharkL as an example_

----
=== Check Hardware ===
==== Measure Clock ====
{{{
26M clock on sine0/sine1
}}}

==== Measure LDO ====
{{{
DCDCCORE, DCDCMEM, DCDCGEN, VDD18, VDD28
}}}

----
=== Check Software ===
==== Check with adb/UART ====
{{{
if adb/UART can connect, almost framework issue
}}}
|*Command*|*Comment*|
|dmesg|print kernel log|
|logcat -v time|print android main log|
|ps|printk current process|
|top|process running status|
|debuggerd -b 596|dump process stack|
|cat /proc/meminfo|print memory info|
|procrank|memory info for each process|

==== Check with Trace32 ====
* Prepare Mode
{{{
d.dump edap:0x80030084    check PC on core0
edap:0x80032084           core1
edap:0x80034084           core2
edap:0x80036084           core3

check which stage it is running now.
0xffff0000 ~ 0xffff3d50 : rom code
0x500004c0 ~ 0x50004fbc : fdl1
0x80000000 ~ 0x8002b934 : fdl2
0x50005000 ~ 0x50009b40 : spl
0x8f800000 ~ 0x8f8740dc : uboot
0xc0009000 ~ 0xc05bca9c : kernel

check whether pc is moving or not.
if stopping, maybe bus locks up
if moving, maybe DDR issue
}}}

* Attach Mode
 * check call stack
 * check task status

==== Check Register ====
{{{
}}}

==== Check Global Variable ====
{{{
if under prepare mode, use v.v (<type>*)eahb:<phy_addr>, the phy_addr can be found in symbol window, use y.b <global_variable>
if under attach mode and break, use v.v <global_variable>

if GED version, use y.b sprd_debug* to see debug variable
if TW version, use y.b sec_debug* to see debug variable
}}}

* sprd_debug_last_regs_access/sec_debug_last_regs_access
{{{
if bus locks up, it can show which register is last accessed

struct sprd_debug_regs_access {
  vaddr = 4112531460, 
  value = 0, 
  stack = 3740827352, 
  pc = 3221297172, 
  time = 300800, 
  status = 1
}

status: if 0, calling start; if 1, calling end
value: if not 0, write command, otherwise, maybe read command
}}}

* sprd_debug_log/sec_debug_log
{{{
can show task/irq/work information
}}}

* runqueues
{{{
use v.v (struct rq*)((char*)&runqueues+__per_cpu_offset[0]) to get current run queue and task
}}}

* !__log_buf/log_buf_len
{{{
use y.b __log_buf to get log buffer address
use v.v log_buf_len to get log buffer size
use d.save.binary <path_file> <buf_add>++<buf_len> to save log buffer
use strings <path_file> > <file> to get log, but the log is not regular
}}}

* kernel_log_mark
{{{
if on TW version, we can get the non-cached kernel log from this variable, it's size is 1M
}}}

==== Check Text Section ====
* get text section address and size
{{{
Check whether text section is destroyed.
Both readelf and objdump can get this information.
}}}
{{{
$ readelf -S vmlinux 
There are 39 section headers, starting at offset 0x68763ec:
Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .head.text        PROGBITS        c0008000 008000 000178 00  AX  0   0  4
  [ 2] .text             PROGBITS        c0009000 009000 67b66c 00  AX  0   0 4096
}}}
{{{
$ arm-eabi-objdump -h vmlinux 

vmlinux:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .head.text    00000178  c0008000  c0008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0067b66c  c0009000  c0009000  00009000  2**12
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
}}}

* Get Sysdump Text Section
{{{
Load dump memory and symbol file in trace32 to get text section.

d.load.elf <file_path>\vmlinux /nocode
d.load.binary <file_path>\<sysdump> 0xc0000000 /noclear
d.save.binary d:\text_dump.mem 0xc0009000++0x67b66c
}}}
* Get Vmlinux Text Section
{{{
Load symbol file in trace32 to get text section.

d.load.elf <file_path>\vmlinux
d.save.binary d:\text_sym.mem 0xc0009000++0x67b66c
}}}

* Compare
{{{
As vmlinux contains __gnu_mcount_nc, please use "parse_text.pl dump_txt.mem vmlinux_txt.mem" to parse it. The tool is in the attachment.

compare d:\text_dump.mem and d:\text_sym.mem
But some jump instructions are different.
}}}

----
=== 附件 ===
[[local:files/check_bitflip.tar.gz|check_bitflip.tar.gz]]</BR>

