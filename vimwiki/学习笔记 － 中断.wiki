%toc 目录

----
== 使用方法 ==
=== 注册中断 ===
{{{
int request_irq(unsigned int irq, irq_handler_t handler, unsigned long flags, const char *name, void *dev);

1935         ret = request_irq(ht->irq_button, headset_button_irq_handler, irqflags | IRQF_NO_SUSPEND, "headset_button", ht);
1936         if (ret) {
1937                 PRINT_ERR("failed to request IRQ_%d(GPIO_%d)\n", ht->irq_button, pdata->gpio_button);
1938                 goto failed_to_request_irq_headset_button;
1939         }

1510 static irqreturn_t headset_button_irq_handler(int irq, void *dev)
1511 {
             ......
1548         return IRQ_HANDLED;
1549 }       
}}}

=== 中断使能 ===
{{{
void enable_irq(unsigned int irq);
void disable_irq(unsigned int irq);
}}}

----
== 代码解析 ==
=== 初始化 ===
# 总irq初始化
{{{
「/kernel/arch/arm/mach-sc/board-sp7731gea.c」
866 MACHINE_START(SCPHONE, "sc8830")
871     .init_irq   = sci_init_irq,
882 MACHINE_END

「/kernel/arch/arm/mach-sc/irq.c」
242 void __init sci_init_irq(void)
243 {   
247         gic_init(0, 29, (void __iomem *)CORE_GIC_DIS_VA,
248                 (void __iomem *)CORE_GIC_CPU_VA);
249         ana_init_irq();
267 }
}}}
# a-die中断
{{{
「/kernel/arch/arm/mach-sc/adie_irq.c」
112 static struct irq_chip sprd_muxed_ana_chip = {
113     .name = "irq-ANA",
114     .irq_ack = sprd_ack_ana_irq,
115     .irq_mask = sprd_mask_ana_irq,
116     .irq_unmask = sprd_unmask_ana_irq,
117 };

140 static struct irqaction __adie_mux_irq = {
141     .name       = "adie_mux",
142     .flags      = IRQF_DISABLED | IRQF_NO_SUSPEND,
143     .handler    = sprd_muxed_ana_handler,
144 };

146 void __init ana_init_irq(void)
147 {                    
148     int n;
149     
150     for (n = IRQ_ANA_INT_START; n < IRQ_ANA_INT_START + NR_ANA_IRQS; n++) {	// #define IRQ_ANA_INT_START		IRQ_ANA_ADC_INT
151         irq_set_chip_and_handler(n, &sprd_muxed_ana_chip,
152                      handle_level_irq);
153         set_irq_flags(n, IRQF_VALID);
154     }
155     setup_irq(IRQ_ANA_INT, &__adie_mux_irq);			// #define IRQ_ANA_INT			SCI_IRQ(38)
156 
157 }
}}}
# d-die中断
{{{
「/kernel/drivers/gpio/gpio-eic.c」
450 static struct irq_chip d_gpio_irq_chip = {
451     .name = "irq-d-gpio",
452     .irq_disable = sci_gpio_irq_mask,
453     .irq_ack = sci_gpio_irq_ack,
454     .irq_mask = sci_gpio_irq_mask,
455     .irq_unmask = sci_gpio_irq_unmask,
456     .irq_set_type = sci_gpio_irq_set_type,
457     .irq_set_wake = sci_gpio_irq_set_wake,
458 };

530 static struct irqaction __d_gpio_irq = {
531     .name = "gpio",
532     .flags = IRQF_DISABLED | IRQF_NO_SUSPEND,
533     .handler = gpio_muxed_handler,
534     .dev_id = &d_sci_gpio.chip,
535 };
536 
537 static struct irqaction __d_eic_irq = {
538     .name = "eic",
539     .flags = IRQF_DISABLED | IRQF_NO_SUSPEND,
540     .handler = gpio_muxed_handler,
541     .dev_id = &d_sci_eic.chip,
542 };

744 static int eic_gpio_probe(struct platform_device *pdev)
745 {
	......
799     if (-1 != r[ENUM_ID_D_GPIO].irq) {
800         gpio_irq_init(r[ENUM_ID_D_GPIO].irq, &d_sci_gpio.chip,
801                   &d_gpio_irq_chip);
802         setup_irq(r[ENUM_ID_D_GPIO].irq, &__d_gpio_irq);
803     }
804 
805     if (-1 != r[ENUM_ID_D_EIC].irq) {
806         gpio_irq_init(r[ENUM_ID_D_EIC].irq, &d_sci_eic.chip,
807                   &d_eic_irq_chip);
808         setup_irq(r[ENUM_ID_D_EIC].irq, &__d_eic_irq);
809     }
810 
811     if (-1 != r[ENUM_ID_A_GPIO].irq)
812         gpio_irq_init(r[ENUM_ID_A_GPIO].irq, &a_sci_gpio.chip,
813                   &a_gpio_irq_chip);
814 
815     if (-1 != r[ENUM_ID_A_EIC].irq)
816         gpio_irq_init(r[ENUM_ID_A_EIC].irq, &a_sci_eic.chip,
817                   &a_eic_irq_chip);
	......
819     return 0; 
820 }   

570 static void gpio_irq_init(int irq, struct gpio_chip *gpiochip,
571               struct irq_chip *irqchip)
572 {
573     int n = gpiochip->to_irq(gpiochip, 0);
574     int irqend = n + gpiochip->ngpio;
575 
576     /* setup the cascade irq handlers */
577     if (irq >= NR_SCI_PHY_IRQS) {
578         irq_set_chained_handler(irq, gpio_muxed_flow_handler);
579         irq_set_handler_data(irq, gpiochip);
580     }
581 
582     for (; n < irqend; n++) {
583         irq_set_chip_and_handler(n, irqchip, handle_level_irq);
584         irq_set_chip_data(n, gpiochip);
585         set_irq_flags(n, IRQF_VALID);
586     }
587 }

}}}

=== 中断处理调用栈 ===
{{{
[<c02dc804>] (sci_keypad_isr+0x15c/0x540) from [<c008a03c>] (handle_irq_event_percpu+0x4c/0x1b0)
[<c008a03c>] (handle_irq_event_percpu+0x4c/0x1b0) from [<c008a1dc>] (handle_irq_event+0x3c/0x5c)
[<c008a1dc>] (handle_irq_event+0x3c/0x5c) from [<c008cd50>] (handle_fasteoi_irq+0xb8/0x100)
[<c008cd50>] (handle_fasteoi_irq+0xb8/0x100) from [<c0089a94>] (generic_handle_irq+0x20/0x30)
[<c0089a94>] (generic_handle_irq+0x20/0x30) from [<c000fd5c>] (handle_IRQ+0x64/0x8c)
[<c000fd5c>] (handle_IRQ+0x64/0x8c) from [<c0009344>] (gic_handle_irq+0xbc/0x164)
[<c0009344>] (gic_handle_irq+0xbc/0x164) from [<c000f040>] (__irq_svc+0x40/0x70)
}}}

----
== 底层寄存器 ==
见device spec的《MCU Interrupt Controller》这一章

=== 中断号 ===
{{{
1、一个中断号对应一个中断源，表格见《MCU Interrupt Controller》这一章
2、上述表中的中断号，需加32才是cat /proc/interrupts打印出来的中断号。如3 int_req_uart1
其实中断号为35
 35:          4       GIC  serial
}}}

=== 中断控制寄存器 ===
以下以TShark为例
* 寄存器范围
{{local:images/irq_range.png}}

* mem map
{{local:images/irq_mem_map.png}}

----
== 调试相关 ==
* 列举当前的irq
{{{
shell@scx35_sp7731gea:/ # cat /proc/interrupts                                 
           CPU0       
 35:          4       GIC  serial
 52:          0       GIC  sprd_codec_dp
 58:          0       GIC  sprd_thm_irq
 60:      10194       GIC  local_timer
 61:          0       GIC  local_timer
 63:          0       GIC  sys_cnt
 67:        171       GIC  gpio
 68:          2       GIC  sci-keypad
 69:          0       GIC  eic
 70:        270       GIC  adie_mux
 71:         23       GIC  mali_gp_mmu, mali_gp, mali_pp0_mmu, mali_pp0, mali_pp1_mmu, mali_pp1
 74:          0       GIC  JPG
 75:          0       GIC  VSP
 78:      10038       GIC  DISPC
 80:          0       GIC  DSI_INT0
 81:          0       GIC  DSI_INT1
 82:          0       GIC  sci-dma
 83:          0       GIC  GSP
 84:          0       GIC  girq-bh
 87:       1868       GIC  dwc_otg, dwc_otg
 89:         52       GIC  mmc1
 90:         58       GIC  mmc2
 92:      10937       GIC  mmc0
100:         80       GIC  sipc-w
101:          0       GIC  dfs_cp0_int1
104:          0       GIC  dfs_cp1_int1
105:         37       GIC  sipc-wcn
116:          0       GIC  cpw
117:          0       GIC  cpwcn
150:         10       GIC  bctimer
151:          0       GIC  local_timer
152:          2       GIC  battery_timer
153:          0       GIC  local_timer
164:          0  irq-d-gpio  sprd_codec_ap
243:        171  irq-d-gpio  focaltech_ts
377:          0  irq-d-gpio  ltr_558als
418:          0   irq-ANA  sprd_rtc
420:          1  irq-a-eic  usb detect
422:          0  irq-a-eic  powerkey
423:          0  irq-a-eic  headset_button
424:          0  irq-a-eic  sprdbat_chg_cv_state
425:        269  irq-a-eic  headset_detect
426:          0  irq-a-eic  sprdbat_vchg_ovi
IPI0:          0  CPU wakeup interrupts
IPI1:          0  Timer broadcast interrupts
IPI2:       3483  Rescheduling interrupts
IPI3:          7  Function call interrupts
IPI4:          2  Single function call interrupts
IPI5:          0  CPU stop interrupts
IPI6:          0  CPU backtrace
Err:          0

其中
 67:        171       GIC  gpio
分解为
164:          0  irq-d-gpio  sprd_codec_ap
243:        171  irq-d-gpio  focaltech_ts
377:          0  irq-d-gpio  ltr_558als

 70:        270       GIC  adie_mux
分解为：
420:          1  irq-a-eic  usb detect
422:          0  irq-a-eic  powerkey
423:          0  irq-a-eic  headset_button
424:          0  irq-a-eic  sprdbat_chg_cv_state
425:        269  irq-a-eic  headset_detect
426:          0  irq-a-eic  sprdbat_vchg_ovi
}}}

* 睡眠唤醒
{{{
如果想让深睡时能通过中断唤醒，需要加IRQF_NO_SUSPEND
}}}
* 中断处理函数
|*文件*|*处理函数*|*描述*|
|/kernel/drivers/irqchip/irq-gic.c|gic_handle_irq|irq中断处理函数|
|/kernel/arch/arm/mach-sc/adie_irq.c|sprd_muxed_ana_handler|a-die|
|/kernel/drivers/gpio/gpio-eic.c|gpio_eic_handler|gpio-eic|

----
== 相关文件 ==
=== 文件 ===
|*文件*|*功能*|
|/kernel/drivers/irqchip/irq-gic.c| |
|/kernel/include/linux/irqchip/arm-gic.h| |
|/kernel/kernel/irq/manage.c| |
|/kernel/arch/arm/mach-sc/irq.c|寄存器设置|
|/kernel/arch/arm/mach-sc/adie_irq.c|a-die的中断|
|/kernel/drivers/gpio/gpio-eic.c|d-die的gpio中断|
|kernel/arch/arm/mach-sc/include/mach/!__irqs-sc8830.h|定义中断irq号|

----
== 参考材料 ==
