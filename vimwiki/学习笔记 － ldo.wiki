%toc 目录

----
== 2713/2723配置开关 ==
* u-boot
{{{
在各项目的头文件：
u-boot/include/configs/<project>.h
chipram/include/configs/<project>.h

#define CONFIG_ADIE_SC2713S       // 2713
#define CONFIG_ADIE_SC2723S       // 2723
}}}

* kernel
{{{
在各项目的配置开关文件：
kernel/arch/arm/configs/<project>_defconfig

# CONFIG_ADIE_SC2713S is not set
CONFIG_ADIE_SC2723S=y

CONFIG_REGULATOR_SC2723S=y
CONFIG_REGULATOR_SC2723=y

再搜索下与2723/2713相关的配置，
如CONFIG_SPRD_VIBRATOR_2723、CONFIG_INPUT_HEADSET_SPRD_SC2723、CONFIG_SPRD_KPLED_2723、CONFIG_SPRD_2713_POWER、CONFIG_THERMAL_SC2713S等
}}}

----
== regulator in kernel ==
=== 使用方法 ===
{{{
struct regulator *vibrator_regulator = NULL;
vibrator_regulator = regulator_get(NULL, "vddcammot");
regulator_set_voltage(vibrator_regulator, 3300000, 3300000);
}}}

=== 文件节点 ===
* 文件节点
|/d/sprd-regulator|ldo是否打开，及其值|
|/d/regulator/|ldo打开次数|
|/sys/devices/regulators.1/regulator/|用户设置的ldo参数|

* 枚举所有regulator的脚本
{{{
#!/system/bin/sh

# readme:
# 将文件push到手机里，运行即可

# usage:
# 如果带参数，读取各ldo当前的电压值
# 如果不带参数，则读取各ldo当前的配置数据

if [ -n "$1" ]; then
	regdir="/d/sprd-regulator"
	reginfo="enable voltage"
else
	regdir="/sys/class/regulator"
	reginfo="name min_microvolts max_microvolts microvolts state"
fi

reglist=$(ls $regdir)

for reg in $reglist
do
	echo "----------- $reg ------------"
	for info in $reginfo
	do
		cat $regdir/$reg/$info
	done
done
}}}

=== 相关文件接口 ===
目录：kernel/drivers/regulator
|*文件*|*功能*|*主要接口*|
|core.c|对外接口</BR>文件节点/sys/class/regulator|regulator_set_voltage</BR>regulator_get|
|sc2723-regulator_dt.c</BR>sc2713s-regulator_dt.c|regulator实现文件|ldo_set_voltage</BR>dcdc_set_voltage|

----
== ldo配置 ==
=== 各ldo电压 ===
* 2723s寄存器
|*ldo名称*|*范围*|*默认值*|*默认开关*|
|VDD18|1.2 - 1.8V, 6.25mV/step|1.8V|on|IO/ NAND Flash/PMIC digital|
|VDD28|1.8 – 3.3V, 10mV/step|2.8V|on|IO/ LCD analog|
|AVDD28|1.8 – 3.3V, 10mV/step|2.5V|on|PLL, MIPI, shark DAC, OTP and EFUSE (internal)|
|VDDGEN0|1.2 - 1.8V, 6.25mV/step|1.8V|off|General purpose|
|VDDSDCORE|1.8 – 3.3V, 10mV/step|3.0V|off|SD Card|
|VSIM0|1.8 – 3.3V, 10mV/step|1.8V|off|Supply for SIM Card|
|VSIM1|1.8 – 3.3V, 10mV/step|1.8V|off|Supply for SIM Card|
|VSIM2|1.8 – 3.3V, 10mV/step|1.8V|off|Supply for SIM Card|
|VDDCAMA|1.8 – 3.3V, 10mV/step|2.8V|off|Supply for external CAM|
|VDDRF0|1.2 - 1.8V, 6.25mV/step|1.8V|on|RF/TCXO|
|VDDRSDIO|1.8 – 3.3V, 10mV/step|3.0V|on|SDIO|
|VDDDCXO|1.8 – 3.3V, 10mV/step|1.8V|on|DCXO|
|VDDCAMD|1.2 - 1.8V, 6.25mV/step|1.5V|off|Camera core|
|VDDCAMIO|1.2 - 1.8V, 6.25mV/step|1.8V|off|Camera IO|
|VDDCAMMOT|1.8 – 3.3V, 10mV/step|2.8V|Off|Camera Auto focus MOT|
|VDDGEN1|1.2 - 1.8V, 6.25mV/step|1.8V|On|General purpose|
|VDDEMMCCORE|1.8 – 3.3V, 10mV/step|3.0V|On|eMMC core|
|VDDUSBH|1.8 – 3.3V, 10mV/step|3.3V|Off|USB IP (internal)|
|VDDWIFIPA|1.8 – 3.3V, 10mV/step|3.3V|Off|WIFI PA|
|KPLED LDO|1.8 – 3.3V, 10mV/step|3.3V|Off|Voltage mode for KPLED|
|VIBR LDO|1.8 – 3.3V, 10mV/step|3.3V|Off|Voltage mode for VIBR|
|DCDCARM|0.6 - 1.3V, 100/32(mV)/step| |On|ARM power|
|DCDCCORE|0.6 - 1.3V, 100/32(mV)/step| |On|Digital core power|
|DCDCMEM|1.2 - 1.8V, 100/32(mV)/step| |On|MEM power|
|DCDCLDO|1.8 - 2.5V, 100/32(mV)/step| |On|LDO power|
|DCDCWPA|0.4 - 3.4V, 3.4/2x Vramp| |Off|W-CDMA PA power|
|DCDCRF|1.2 - 1.8V, 100/32(mV)/step| |On|W-CDMA RF power|

=== ldo sleep配置 ===
* ldo sleep配置相关
{{{
u-boot/board/spreadtrum/<project>/ldo_sleep.c
该文件用于配置ldo的行为

在配工程时，需要让硬件提供一份当前板子的ldo配置信息，如哪些ldo需要打开，哪些ldo在sleep时需要关闭，哪些在sleep时进入LP模式等
}}}

* 寄存器配置
|*寄存器*|*功能*|
|ANA_REG_GLB_LDO_DCDC_PD/ANA_REG_GLB_LDO_PD_CTRL|配置正常状态下各ldo的开关状态|
|ANA_REG_GLB_PWR_SLP_CTRL0/ANA_REG_GLB_PWR_SLP_CTRL1|配置sleep时，各ldo能否关闭|
|ANA_REG_GLB_PWR_SLP_CTRL2/ANA_REG_GLB_PWR_SLP_CTRL3|配置sleep时是否能进LP模式|
|ANA_REG_GLB_PWR_SLP_CTRL4|配置是否软件配置LP模式|
|ANA_REG_GLB_PWR_XTL_ENx|当有XTLx_EN或EXT_XTLx_EN时，是否打开ldo|

* 注意事项
 0. DCDCCORE, DCDCMEM, DCDCGEN, VDD18, VDD28，这几个ldo总是打开

=== 案例 ===
* 通过a-die或d-die输出26M clock

{{{
26M clock从RF那边输出
一般RF会有CLK26M/REFOUT1/REFOUT2/REFOUT3这几路26M时钟源
CLK26M一般作为MCLK_26M输出给d-die
REFOUT1/REFOUT2/REFOUT3则作为其他设备的时钟源，如BT/WIFI等设备
这些26M时钟是否打开，是在RF那边配置
AP打开vddrf0这路电，就会根据配置打开26M时钟
}}}
{{local:images/rf3592_26m_clk.png}}</BR>
{{local:images/rf3592_vddrf0.png}}</BR>
{{{
a-die有EXT_XTL_EN0/EXT_XTL_EN1来控制
通过ldo_sleep里的配置，当外部有信号时，就会打开vddrf0这个ldo，从而使能RF，输出26M clock
首先，要将a-die相应pin脚本使能
再，设置EXT_XTL_EN0的配置，将VDDRF0打开

patch:
diff --git a/board/spreadtrum/sp8730sea/ldo_sleep.c b/board/spreadtrum/sp8730sea/ldo_sleep.c
index ad0331d..a7016cf 100755
--- a/board/spreadtrum/sp8730sea/ldo_sleep.c
+++ b/board/spreadtrum/sp8730sea/ldo_sleep.c
@@ -36,6 +36,8 @@ void init_ldo_sleep_gr(void)
 
        while((ANA_REG_GET(ANA_REG_GLB_PWR_WR_PROT_VALUE) & BIT_PWR_WR_PROT) != BIT_PWR_WR_PROT);
 
+       ANA_REG_OR(ANA_REG_PIN_EXT_XTL_EN0, BIT_EXT_XTL_EN0_DSIN_MODE);
+
        ANA_REG_SET(ANA_REG_GLB_LDO_DCDC_PD,
                //BIT_LDO_EMM_PD |
                //BIT_DCDC_TOPCLK6M_PD |
@@ -414,7 +416,7 @@ void init_ldo_sleep_gr(void)
                //BIT_LDO_RF1_XTL0_EN |
                //BIT_LDO_RF0_EXT_XTL2_EN |
                //BIT_LDO_RF0_EXT_XTL1_EN |
-               //BIT_LDO_RF0_EXT_XTL0_EN |
+               BIT_LDO_RF0_EXT_XTL0_EN |
                BIT_LDO_RF0_XTL2_EN |
                BIT_LDO_RF0_XTL1_EN |
                BIT_LDO_RF0_XTL0_EN |
}}}
{{local:images/2723_ext_xtl_en0.png}}
{{{
d-die也有相应的EXT_XTL_EN引脚，但它需要与XTL_BUF_EN相关联后，才能作用到a-die
首先要将pinmap设为EXT_XTL_EN功能
再将EXT_XTL_EN关联到XTL_BUF_EN，这个关联寄存器是在aon_apb_reg中的RES_REG0中的

patch:
diff --git a/board/spreadtrum/sp8730sea/ldo_sleep.c b/board/spreadtrum/sp8730sea/ldo_sleep.c
index ad0331d..26771ee 100755
--- a/board/spreadtrum/sp8730sea/ldo_sleep.c
+++ b/board/spreadtrum/sp8730sea/ldo_sleep.c
@@ -732,6 +732,11 @@ void init_ldo_sleep_gr(void)
                0
        );
 
+       CHIP_REG_SET(REG_AON_APB_RES_REG0,
+               BITS_RES_REG0(BIT(2)) |
+               0
+       );
+
        ANA_REG_SET(ANA_REG_GLB_SLP_WAIT_DCDCARM,
                BITS_SLP_IN_WAIT_DCDCARM(7)             |
                BITS_SLP_OUT_WAIT_DCDCARM(8)            |
diff --git a/board/spreadtrum/sp8730sea/pinmap-sp8830.c b/board/spreadtrum/sp8730sea/pinmap-sp8830.c
index 1a78545..549b73b 100644
--- a/board/spreadtrum/sp8730sea/pinmap-sp8830.c
+++ b/board/spreadtrum/sp8730sea/pinmap-sp8830.c
@@ -107,7 +107,7 @@ static pinmap_t pinmap[]={
 {REG_PIN_SIMRST2,             BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},
 {REG_PIN_MEMS_MIC_CLK0,       BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},
 {REG_PIN_MEMS_MIC_DATA0,      BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPD|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//CHG_EN
-{REG_PIN_MEMS_MIC_CLK1,       BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_Z},//OTG
+{REG_PIN_MEMS_MIC_CLK1,       BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(1)|BIT_PIN_NUL|BIT_PIN_SLP_NUL|BIT_PIN_SLP_IE},//OTG
 {REG_PIN_MEMS_MIC_DATA1,      BIT_PIN_SLP_AP|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(3)|BIT_PIN_WPU|BIT_PIN_SLP_WPU|BIT_PIN_SLP_IE},//CHG_DONE
 {REG_PIN_SD1_CLK,             BIT_PIN_SLP_CP2|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(2)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//W_AGC2
 {REG_PIN_SD1_CMD,             BIT_PIN_SLP_CP2|BIT_PIN_NULL|BITS_PIN_DS(1)|BITS_PIN_AF(2)|BIT_PIN_NUL|BIT_PIN_SLP_WPD|BIT_PIN_SLP_Z},//WB_EN_A
}}}
{{local:images/9830_ext_xtl_en2.png}}</BR>
{{local:images/2723_xtl_buf_en.png}}</BR>
{{local:images/9830_xtl_buf_en.png}}

----
== 附件 ==
[[local:files/read_regulator.sh|read_regulator.sh]]</BR>
[[local:files/read_voltage.sh|read_voltage.sh]]</BR>
[[local:files/ldo_sleep_config_v0.2.docx|ldo_sleep_config_v0.2.docx]]</BR>

