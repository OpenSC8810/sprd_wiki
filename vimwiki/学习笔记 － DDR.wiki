%toc 目录
_Take SharkL as example_

----
=== DDR clock ===
==== how to check current DDR clock ====
{{{
adb shell cat /d/clk/clk_summary | grep clk_emc?

get the value and divide by 2

e.g,
$ adb shell cat /d/clk/clk_summary | grep clk_emc
       clk_emc                  0           0            768000000 

then the current ddr frequence is 384M
}}}

==== clock register ====
{{{
DDR use TWPLL and DPLL as its clock parent.
DDR clock config register is clk_emc_cfg(0x402d0058)
}}}
{{local:images/clk_emc_cfg.png}}
{{{
If the value is 7, the parent will be DPLL, otherwise, the parent will be TWPLL.
}}}

----
=== DDR port ===
==== port introduction ====
{{{
chipram/arch/arm/cpu/sprd_dmc/dram_cfg_28nm.c

#if defined(CONFIG_SC9630)
umctl2_port_info_t UMCTL2_PORT_CONFIG[] =
{
//rw_order r_hpr r_pg  r_ugent r_age r_rord_bp r_age_cnt, w_pg  w_ugent w_age  w_age_cnt
    {TRUE, FALSE, TRUE, FALSE,  FALSE,  FALSE,     0x100,   TRUE, FALSE,  FALSE, 0x100},//port0,ca7
    {TRUE, TRUE,  TRUE, FALSE,  TRUE,   FALSE,     0x020,   TRUE, FALSE,  TRUE,  0x020},//port1,display
    {TRUE, FALSE, TRUE, FALSE,  FALSE,  FALSE,     0x100,   TRUE, FALSE,  FALSE, 0x100},//port2,gpu/gsp
    {TRUE, TRUE,  TRUE, FALSE,  TRUE,   FALSE,     0x008,   TRUE, FALSE,  TRUE,  0x008},//port3,ap zip
    {TRUE, FALSE, TRUE, FALSE,  TRUE,   FALSE,     0x040,   TRUE, FALSE,  TRUE,  0x040},//port4,mm
    {TRUE, TRUE,  TRUE, FALSE,  TRUE,   FALSE,     0x010,   TRUE, FALSE,  TRUE,  0x010},//port5,cp0 arm
    {TRUE, TRUE,  TRUE, FALSE,  TRUE,   FALSE,     0x002,   TRUE, FALSE,  TRUE,  0x002},//port6,CP0 dsp
    {TRUE, TRUE,  TRUE, FALSE,  TRUE,   FALSE,     0x002,   TRUE, FALSE,  TRUE,  0x002},//port7,cp1 accharq
    {TRUE, TRUE,  TRUE, FALSE,  TRUE,   FALSE,     0x002,   TRUE, FALSE,  TRUE,  0x002},//port8,cp1 dsp
    {TRUE, TRUE,  TRUE, FALSE,  TRUE,   FALSE,     0x010,   TRUE, FALSE,  TRUE,  0x010}, //port9,CP1 ca5
    {0xff},
};

#elif defined(CONFIG_SPX30G)

umctl2_port_info_t UMCTL2_PORT_CONFIG[] =
{
//rw_order r_hpr r_pg  r_ugent r_age r_rord_bp r_age_cnt, w_pg  w_ugent w_age  w_age_cnt
    {TRUE, FALSE,TRUE, FALSE,  TRUE,  FALSE,     0x040,   TRUE, FALSE,  TRUE, 0x040},//port0,mm/dcam/vsp
    {TRUE, FALSE,TRUE, FALSE,  FALSE, FALSE,     0x100,   TRUE, FALSE,  FALSE,0x100},//port1,GPU/gsp
    {TRUE, TRUE, TRUE, FALSE,  TRUE,  FALSE,     0x020,   TRUE, FALSE,  TRUE, 0x020},//port2,display
    {TRUE, FALSE,TRUE, FALSE,  FALSE, FALSE,     0x100,   TRUE, FALSE,  FALSE,0x100},//port3,CA7
    {TRUE, TRUE, TRUE, FALSE,  TRUE,  FALSE,     0x002,   TRUE, FALSE,  TRUE, 0x002},//port4,CPx DSP
    {TRUE, TRUE, TRUE, FALSE,  TRUE,  FALSE,     0x008,   TRUE, FALSE,  TRUE, 0x008},//port5,CP0W
    {TRUE, TRUE, TRUE, FALSE,  TRUE,  FALSE,     0x010,   TRUE, FALSE,  TRUE, 0x010},//port6,CP0 ARM
    {TRUE, FALSE,TRUE, FALSE,  TRUE,  FALSE,     0x080,   TRUE, FALSE,  TRUE, 0x080},//port7,AP matrix
    {TRUE, TRUE, TRUE, FALSE,  TRUE,  FALSE,     0x008,   TRUE, FALSE,  TRUE, 0x008},//port8,ZIP
    {TRUE, TRUE, TRUE, FALSE,  TRUE,  FALSE,     0x010,   TRUE, FALSE,  TRUE, 0x010}, //port9,CP2
    {0xff},
};
#endif
}}}
{{{
register 0x300003fc shows the state of each DDR port.
The high 16 bits are for writing port. The low 16 bits are for reading port.
The above table shows what mean of eacho bit.

if the bit is always 1, that means the port hangs.

The reason that causes DDR hangs:
If one of the above port wants to access DDR, but the controller of that port is power down or reset, meanwhile other port wants to access DDR.

After confirming DDR hangs, you should not access DDR anymore, but can access register.
Then can check PWR_STATUSx_DBG which modules is power down.(0x402b00bc ~ 0x402b00c4 in sharkl)
SLEEP_STATUS to check Core sleep status. (0x402b00d4)
}}}

==== remapping ====
{{{
dsp发出的地址是0xCxxx_xxxx,   dsp code放在ddr上的物理地址是0x8xxx_xxxx. 

由于dsp没有mmu, 需要用这2种方法把0xCxxxx_xxxx转换成0x8xxx_xxxx


1.umctrl addrmap register[0] 0x30000200是0x1F,  0xC000_0000 会绕回到0x8000_0000。 对所有port有效。

2. pub regitster 0x30023018 dmc_port4_addr_remap设置成0x98989898,  dsp访问的port4时，0xCxxx_xxxx会remap到0x8xxx_xxxx.  其他port无效。

ddr retention保存恢复pub port4 addr remap register之前,  看到的各种sleep回来 CP没有挂死的情况。这2天检查了一下，要么是pub没有掉电，pub remap寄存器仍然有效。 要么是umctrl addrmap register[0] 是0x1F 绕回了。

如果发现sleep回来CP没有挂:
1. 检查0x30000200 是不是0x1F, 
2. 检查 0x30023018 是不是0x98989898

如果这2个地方都没有设置，dsp应该会挂掉。


pub port4 addr remap register的详细设置方法:

0x30023000 bit[8-9] 设置成0x3, enable remap 
0x30023018 设置成0x98989898
每4bit设置一个地址段的remap对应关系。 
 bit[0-3]: 8, 表示port4的0x8... remap到0x8... 
 bit[4-7]: 9, 表示port4的0x9... remap到0x9... 
 bit[8-11]: 8, 表示port4的0xA... remap到0x8...
 bit[12-15]: 9, 表示port4的0xB... remap到0x9...
 bit[16-19]: 8, 表示port4的0xC... remap到0x8...
 bit[20-23]: 9, 表示port4的0xD... remap到0x9...
 bit[24-27]: 8, 表示port4的0xE... remap到0x8...
 bit[28-31]: 9, 表示port4的0xF... remap到0x9...
}}}

=== debug ===
==== DDR不稳时可用的一些调试技巧 ====
{{{
1. 降频
2、增压（dcdccore、dcdcmem）
3、lowpower
}}}

----
=== 附件 ===
[[local:files/ddr_debug.patch|ddr_debug.patch]]</BR>

