%toc 目录

----
=== 指令 ===
==== MRS/MSR ====
{{{
MRS
将状态寄存器的内容传送至通用寄存器。
MRS{<cond>}<Rd>, CPSR
MRS{<cond>}<Rd>, SPSR

MSR
将通用寄存器的内容传送至状态寄存器。
MSR{<cond>} CPSR_<fields>, #<immediate>
MSR{<cond>} CPSR_<fields>, <Rm> 
MSR{<cond>} SPSR_<fields>, #<immediate>
MSR{<cond>} SPSR_<fields>, <Rm> 
<fields>设置状态寄存器中需要操作的位。状态寄存器的32位可以分为4个8位的域：
 f: 指示bits[31 : 24]，又名条件标志位域
 s: 指示bits[23 : 16]，又名状态标志位域
 x: 指示bits[15 : 8]， 又名扩展位域
 c: 指示bits[7 : 0]，又名控制位
}}}
[[http://freesoftman.iteye.com/blog/1827249|汇编指令状态寄存器访问指令（MRS,MSR）]]<BR>

==== stdmfd,ldmfd,ldmia,ldmib ====
{{{
多寄存器寻址：LDMIA，LDMIB，STMIA，STMIB，LDMDA，LDMDB，STMDA，STMDB
堆栈寻址：LDMFA，LDMFD，STMFA，STMFD，LDMEA，LDMED，STMEA，STMED
IA： 每次传送后地址加4；
IB： 每次传送前地址加4；
DA： 每次传送后地址减4；
DB： 每次传送前地址减4；
FD： 满递减堆栈；
ED： 空递减堆栈；
FA： 满递增堆栈；
EA： 空递增堆栈。

格式：STMFD  Rn{!},{reglist}{^}
后缀“!”表示最后的地址写回到Rn中
后缀“^”表示不允许在用户模式下使用

I开头的，寄存器列表的顺序是从左到右；
D开头的，寄存器列表的顺序是从右到左。
}}}
[[http://www.bubuko.com/infodetail-729580.html|LDMIA、LDMIB、LDMDB、LDMDA、STMIA、LDMFD、LDMFA、LDMED、LDMEA等指令详解]]<BR>

----
=== 寄存器 ===
==== SPSR/CPSR ====
{{local:images/arm_cpsr_reg.png}}<BR>
*条件码标志*
| 标志位 | 含义                                                                                                                                                                                                                                                                                                                                                                      |
| N      | 当两个有符号整数运算时：<BR>N=1：表示运算的结果为负数；<BR>N=0：表示运算的结果为正数或零。                                                                                                                                                                                                                                                                                |
| Z      | Z=1表示运算的结果为零，Z=0表示运算的结果非零。<BR>对于CMP指令，Z=1表进行比较的两个数相等                                                                                                                                                                                                                                                                                  |
| C      | 可以有4种方法设置C的值：<BR>在加法指令中(包括比较指令CMP)，当结果产生了进位,则C=1,表示无符号运算发生上溢出；其他情况C=0.<BR>在减法指令中(包括减法指令CMP)，当运算中发生借位，则C=0，表示无符号运算数发生下溢出；其他情况下C=1。<BR>对于包含移位操作的非加碱运算指令，C中包含最后一次溢出的的位的数值<BR>对于其他非加减运算指令，C位的值通常不受影响 |
| V      | 对于加减运算指令，当操作数和运算结果为二进制的补码表示的带符号数时，V=1表示符号为溢出；通常其他指令不影响V位。                                                                                                                                                                                                                                                            |
*控制位*
{{{
CPSR的低八位I、F、T、M[4:0]统称为控制位。当异常中断发生时这些位发生变化。在特权级的处理器模式下，软件可以修改这些控制位。 
1) I: IRQ中断禁止位：当I=1时禁止IRQ中断，
2) F: FIQ中断禁止位：当F=1时禁止FIQ中断 
3) T: T控制位该位反映处理器的运行状态。当该位为1时，程序运行于THUMB状态，否则运行于ARM状态。该信号反映在外部引脚TBIT上。在程序中不得修改CPSR中的TBIT位，否则处理器工作状态不能确定。
4) 保留位：CPSR中的其余位为保留位，当改变CPSR中的条件码标志位或者控制位时，保留位不要改变，在程序中也不要用保留位存储数据。保留位将用于ARM版本的扩展。
5) 运行模式位M[4：0]：这几位是模式位，这些位决定了处理器的运行模式。
具体含义如下表所示：
}}}
| M[4:0]  | 处理器模式 | ARM模式可访问的寄存器                   | THUMB模式可访问的寄存器              |
| 0b10000 | 用户模式   | PC,CPSR,R0~R14                          | PC,CPSR,R0~R7,LR,SP                  |
| 0b10001 | FIQ模式    | PC,CPSR,SPSR_fiq,R14_fiq~R8_fiq,R0~R7   | PC,CPSR,SPSR_fiq,LR_fiq,SP_fiq,R0~R7 |
| 0b10010 | IRQ模式    | PC,CPSR,SPSR_irq,R14_irq~R13_irq,R0~R12 | PC,CPSR,SPSR_irq,LR_irq,SP_irq,R0~R7 |
| 0b10011 | 管理模式   | PC,CPSR,SPSR_svc,R14_svc~R13_svc,R0~R12 | PC,CPSR,SPSR_svc,LR_svc,SP_svc,R0~R7 |
| 0b10111 | 中止模式   | PC,CPSR,SPSR_abt,R14_abt~R13_abt,R0~R12 | PC,CPSR,SPSR_abt,LR_abt,SP_abt,R0~R7 |
| 0b11011 | 未定义模式 | PC,CPSR,SPSR_und,R14_und~R13_und,R0~R12 | PC,CPSR,SPSR_und,LR_und,SP_und,R0~R  |
| 0b11111 | 系统模式   | PC,CPSR,R0~R14                          | PC,CPSR,LR,SP,R0~R74                 |

----
=== gcc内联汇编 ===
==== 语法 ====
{{{
格式：
  asm(汇编语句模板: 输出操作列表: 输入操作列表: 破坏描述部分);

示例：
  asm("mov %[result], %[value], ror #1"
             : [result]"=r" (y) /* Rotation result. */
             : [value]"r" (x) /* Rotated value. */
             : /* No clobbers */
  );

汇编语句模板：由汇编语句序列组成，语句之间使用“;”、“\n”或“\n\t”分开。
输出操作列表：每一个条目是由一对[]（方括号）和被他包括的符号名组成，它后面跟着限制性字符串，再后面是圆括号和它括着的C变量。
输入操作列表：语法和输入操作列表一样
破坏描述符：用于通知编译器我们使用了哪些寄存器或内存，由逗号格开的字符串组成，每个字符串描述一种情况，一般是寄存器名；除寄存器外还有“memory”。

上面的4个部分中只要后面的还要使用，前面的部分没有使用也不能省略，必须空但是保留冒号。
}}}
==== 操作列表符 ====
| Constraint | Usage in ARM state                                                                | Usage in Thumb state                                                                    |
| f          | Floating point registers f0 .. f7                                                 | Not available                                                                           |
| h          | Not available                                                                     | Registers r8..r15                                                                       |
| G          | Immediate floating point constant                                                 | Not available                                                                           |
| H          | Same a G, but negated                                                             | Not available                                                                           |
| I          | Immediate value in data processing instructions<BR>e.g. ORR R0, R0, #operand      | Constant in the range 0 .. 255<BR>e.g. SWI operand                                      |
| J          | Indexing constants -4095 .. 4095<BR>e.g. LDR R1, [PC, #operand]                   | Constant in the range -255 .. -1<BR>e.g. SUB R0, R0, #operand                           |
| K          | Same as I, but inverted                                                           | Same as I, but shifted                                                                  |
| L          | Same as I, but negated                                                            | Constant in the range -7 .. 7<BR>e.g. SUB R0, R1, #operand                              |
| l          | Same as r                                                                         | Registers r0..r7<BR>e.g. PUSH operand                                                   |
| M          | Constant in the range of 0 .. 32 or a power of 2<BR>e.g. MOV R2, R1, ROR #operand | Constant that is a multiple of 4 in the range of 0 .. 1020<BR>e.g. ADD R0, SP, #operand |
| m          | Any valid memory address                                                          |                                                                                         |
| N          | Not available                                                                     | Constant in the range of 0 .. 31<BR>e.g. LSL R0, R1, #operand                           |
| O          | Not available                                                                     | Constant that is a multiple of 4 in the range of -508 .. 508<BR>e.g. ADD SP, #operand   |
| r          | General register r0 .. r15<BR>e.g. SUB operand1, operand2, operand3               | Not available                                                                           |
| w          | Vector floating point registers s0 .. s31                                         | Not available                                                                           |
| X          | Any operand                                                                       |                                                                                         |



