%toc 目录

----
=== log & print ===
==== /proc/sys/kernel/printk ====
==== /proc/kmsg ====
==== /dev/kmsg ====
==== /sys/module/printk/parameters/console_suspend ====
{{{
echo N > /sys/module/printk/parameters/console_suspend
}}}

----
=== system ===
==== /proc/interrupts ====
==== /proc/sysrq-trigger ====
{{{
echo "c" > /proc/sysrq-trigger		模拟panic
}}}
==== /proc/<pid>/stat ====
{{{
    seq_printf(m, "%d (%s) %c", pid_nr_ns(pid, ns), tcomm, state);              // 进程(包括轻量级进程，即线程)号；
                                                                                // 应用程序或命令的名字；
                                                                                // 任务的状态，R:runnign, S:sleeping (TASK_INTERRUPTIBLE), D:disk sleep (TASK_UNINTERRUPTIBLE), T: stopped, T:tracing stop,Z:zombie, X:dead
    seq_put_decimal_ll(m, ' ', ppid);                                           // 父进程ID
    seq_put_decimal_ll(m, ' ', pgid);                                           // 线程组号
    seq_put_decimal_ll(m, ' ', sid);                                            // 该任务所在的会话组ID
    seq_put_decimal_ll(m, ' ', tty_nr);                                         // 该任务的tty终端的设备号，INT（34817/256）=主设备号，（34817-主设备号）=次设备号
    seq_put_decimal_ll(m, ' ', tty_pgrp);                                       // 终端的进程组号，当前运行在该任务所在终端的前台任务(包括shell 应用程序)的PID
    seq_put_decimal_ull(m, ' ', task->flags);                                   // 进程标志位，查看该任务的特性
    seq_put_decimal_ull(m, ' ', min_flt);                                       // 该任务不需要从硬盘拷数据而发生的缺页（次缺页）的次数
    seq_put_decimal_ull(m, ' ', cmin_flt);                                      // 累计的该任务的所有的waited-for进程曾经发生的次缺页的次数目
    seq_put_decimal_ull(m, ' ', maj_flt);                                       // 该任务需要从硬盘拷数据而发生的缺页（主缺页）的次数
    seq_put_decimal_ull(m, ' ', cmaj_flt);                                      // 累计的该任务的所有的waited-for进程曾经发生的主缺页的次数目
    seq_put_decimal_ull(m, ' ', cputime_to_clock_t(utime));                     // 该任务在用户态运行的时间，单位为jiffies
    seq_put_decimal_ull(m, ' ', cputime_to_clock_t(stime));                     // 该任务在核心态运行的时间，单位为jiffies
    seq_put_decimal_ll(m, ' ', cputime_to_clock_t(cutime));                     // 累计的该任务的所有的waited-for进程曾经在用户态运行的时间，单位为jiffies
    seq_put_decimal_ll(m, ' ', cputime_to_clock_t(cstime));                     // 累计的该任务的所有的waited-for进程曾经在核心态运行的时间，单位为jiffies
    seq_put_decimal_ll(m, ' ', priority);                                       // 任务的动态优先级
    seq_put_decimal_ll(m, ' ', nice);                                           // 任务的静态优先级
    seq_put_decimal_ll(m, ' ', num_threads);                                    // 该任务所在的线程组里线程的个数
    seq_put_decimal_ull(m, ' ', 0);                                             // 由于计时间隔导致的下一个 SIGALRM 发送进程的时延，以 jiffy 为单位.
    seq_put_decimal_ull(m, ' ', start_time);                                    // 该任务启动的时间，单位为jiffies
    seq_put_decimal_ull(m, ' ', vsize);                                         // 该任务的虚拟地址空间大小
    seq_put_decimal_ull(m, ' ', mm ? get_mm_rss(mm) : 0);                       // 该任务当前驻留物理地址空间的大小
    seq_put_decimal_ull(m, ' ', rsslim);                                        // 该任务能驻留物理地址空间的最大值
    seq_put_decimal_ull(m, ' ', mm ? (permitted ? mm->start_code : 1) : 0);     // 该任务在虚拟地址空间的代码段的起始地址
    seq_put_decimal_ull(m, ' ', mm ? (permitted ? mm->end_code : 1) : 0);       // 该任务在虚拟地址空间的代码段的结束地址
    seq_put_decimal_ull(m, ' ', (permitted && mm) ? mm->start_stack : 0);       // 该任务在虚拟地址空间的栈的结束地址
    seq_put_decimal_ull(m, ' ', esp);                                           // esp(32 位堆栈指针) 的当前值, 与在进程的内核堆栈页得到的一致.
    seq_put_decimal_ull(m, ' ', eip);                                           // 指向将要执行的指令的指针, EIP(32 位指令指针)的当前值.
    seq_put_decimal_ull(m, ' ', task->pending.signal.sig[0] & 0x7fffffffUL);    // 待处理信号的位图，记录发送给进程的普通信号
    seq_put_decimal_ull(m, ' ', task->blocked.sig[0] & 0x7fffffffUL);           // 阻塞信号的位图
    seq_put_decimal_ull(m, ' ', sigign.sig[0] & 0x7fffffffUL);                  // 忽略的信号的位图
    seq_put_decimal_ull(m, ' ', sigcatch.sig[0] & 0x7fffffffUL);                // 被俘获的信号的位图
    seq_put_decimal_ull(m, ' ', wchan);                                         // 如果该进程是睡眠状态，该值给出调度的调用点
    seq_put_decimal_ull(m, ' ', 0);                                             // 被swapped的页数，当前没用
    seq_put_decimal_ull(m, ' ', 0);                                             // 所有子进程被swapped的页数的和，当前没用
    seq_put_decimal_ll(m, ' ', task->exit_signal);                              // 该进程结束时，向父进程所发送的信号
    seq_put_decimal_ll(m, ' ', task_cpu(task));                                 // 运行在哪个CPU上
    seq_put_decimal_ull(m, ' ', task->rt_priority);                             // 实时进程的相对优先级别
    seq_put_decimal_ull(m, ' ', task->policy);                                  // 进程的调度策略，0=非实时进程，1=FIFO实时进程；2=RR实时进程
    seq_put_decimal_ull(m, ' ', delayacct_blkio_ticks(task));
    seq_put_decimal_ull(m, ' ', cputime_to_clock_t(gtime));
    seq_put_decimal_ll(m, ' ', cputime_to_clock_t(cgtime));

    if (mm && permitted) {
        seq_put_decimal_ull(m, ' ', mm->start_data);
        seq_put_decimal_ull(m, ' ', mm->end_data);
        seq_put_decimal_ull(m, ' ', mm->start_brk);
        seq_put_decimal_ull(m, ' ', mm->arg_start);
        seq_put_decimal_ull(m, ' ', mm->arg_end);
        seq_put_decimal_ull(m, ' ', mm->env_start);
        seq_put_decimal_ull(m, ' ', mm->env_end);
    } else
        seq_printf(m, " 0 0 0 0 0 0 0");

    if (permitted)
        seq_put_decimal_ll(m, ' ', task->exit_code);
    else
        seq_put_decimal_ll(m, ' ', 0);
}}}

----
=== chip ===
==== /d/gpio ====
==== /d/clk ====
==== /d/sprd-regulator ====
==== /sys/class/regulator ====
==== /sys/class/power_supply ====
{{{
跟电池管理相关，如充电、电量检测、AC充电等
}}}

----
=== memory & EMMC ===
==== /d/memblock/reserved ====
==== /proc/meminfo ====
==== /proc/buddyinfo ====
{{{
伙伴算法中，各个order所剩余的个数

如，
# cat /proc/buddyinfo 
 Node 0, zone      DMA      4      4      3      3      3      3      2      0      1      1      2 
 Node 0, zone   Normal    140     90     34   5201   2816    556     29      0      0      0      0 
 Node 0, zone  HighMem      0   2542   1859    253    961   3568    560     19      1      0      0 

 内存管理的信息，主要用来分析内存碎片的

 内存分为三个区域，DMA，Normal，HighMem，如果分页大小为4K，那我们可以分区域来看：
 DMA：
  有4块1页大小的空间、4块2页大小的空间，3块4页大小的空间，3块8页大小的空间。。。。。。
 Normal：
  有140块1页大小的空间、90块2页大小的空间。。。。。。
 以此类推，越是往后的空间，就越是连续，数目越多，就代表这个大小的连续空间越多，当大的连续空间很少的时候，也就说明，内存碎片已经非常多了。
}}}

==== /proc/slabinfo ====
{{{
各个slab的分配情况
}}}
==== /dev/block/platform/sdio_emmc ====

----
=== gpu ===
* Android4.4 / Android5.1--Utgard
{{{
adb root
adb remount
adb shell
cd sys/module/mali/paramters
cat gpufreq_table 查看GPU支持的所有频率
echo GPU频率 > gpufreq_min_limit；echo GPU频率 > gpufreq_max_limit
}}}
* Android5.1 -- Midgard-自带DVFS
{{{
adb root
adb remount
adb shell
cd sys/module/mali_kbase/paramters
cat gpu_freq_list 查看GPU支持的所有频率
echo GPU频率 > gpu_freq_min_limit；echo GPU频率 > gpu_freq_max_limit
}}}
* Android5.1 -- Midgard-Devfreq
{{{
adb root
adb remount
adb shell
cd /sys/devices/60000000.gpu/devfreq/60000000.gpu
cat available_frequencies 查看GPU支持的所有频率
echo GPU频率 > min_freq；echo GPU频率 > max_freq
}}}
* Android4.4 查看当前频率
{{{
adb root
adb remount
adb shell
cd sys/module/mali/paramters
cat gpu_cur_freq 查看GPU支持的频率
}}}
* Android5.1 tshark/sharkl查看当前频率
{{{
adb root
adb remount
adb shell
cd sys/module/mali/paramters
cat gpu_freq_cur 查看GPU支持的频率
}}}
* Android5.1 t8查看当前频率
{{{
adb root
adb remount
adb shell
cd sys/module/mali_kbase/paramters
cat gpu_freq_cur 查看GPU支持的频率
}}}
* Android5.1 tshark/sharkl debug参数
{{{
gpu_boost_level
gpu_boost_sf_level
gpu_freq_cur
gpu_freq_list
gpu_freq_max_limit
gpu_freq_min_limit
mali_debug_level
}}}
* Android5.1 tshark/sharkl 查看GPU loading
{{{
adb root
adb remount
adb shell
cd d/mali0
cat utilization_gp/utilization_gp_pp/utilization_pp 查看GPU当前的负载
}}}

----
=== sprd_debug ===
==== /d/sprd_debug/cpu/cpu_usage ====
==== /d/sprd_debug/io/last_regs ====
==== /d/sprd_debug/irq/irqlog ====
==== /d/sprd_debug/sche/schedlog ====

----
=== other ===
==== /sys/class/backlight/sprd_backlight/ ====
==== /sys/class/thermal/thermal_zone1 ====
==== /sys/class/rtc/rtc0/wakealarm ====
{{{
rtc的文件节点，开启一个20s的定时器
echo 0 > /sys/class/rtc/rtc0/wakealarm
echo +20 > /sys/class/rtc/rtc0/wakealarm
}}}

----
=== 资料 ===
[[http://blog.csdn.net/adaptiver/article/details/6891666|proc下文件(buddyinfo/vmallocinfo...)]]<BR>
[[http://bbs.chinaunix.net/thread-2002769-1-1.html|proc文件系统详解]]<BR>

