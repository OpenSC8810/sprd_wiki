%toc 目录

----
== git命令 ==
{{{
git init                        //创建一个空的 git 仓库或者重新初始化一个已存在的仓库。
git add .
git commit
   git commit -a                //这个命令可以直接提交所有修改,省去了你git add和git diff和git commit 的工序,可谓一条龙服务。
                                //此处有一点应该注意,那就是git commit -a无法把新增文件或文件夹加入进来
                                //所以,如果你新增了文件或文件夹,那么就要老老实实的先git add .,再git commit
git diff                        //比较working tree和index file 的区别
   git diff –cached             //用来查看 index file 和仓库之间代码的区别的。
git status                      //获取整体改动的信息
                                //可以看到提示信息“changed but not updated”,就是说 git 发现你有已经修改了但还未 git add 的内容。
                                //如果git提示说“Changes to be committed”,那就是表明 git 发现了你已经 git add 但还未 git commit 的内容。
                                //如果git提示说“Untracked files”,那么就是你增加了新文件或者在某个子目录下增加了新文件。
git log
   git log -p                   //这样git 不但会给出开发日志,而且会显示每个开发版本的代码区别所在
   git log V3..V7               //显示 V3 之后直至 V7 的所有历史记录
   git log V3..                 //显示所有 V3 之后的历史记录。
   git log –since=”2 weeks ago” //显示 2 周前到现在的所有历史记录。具体语法可查询
   git log stable..experimental //将显示在 experimental 分支但不在 stable 分支的历史记录
   git log v2.43.. curses/      //查看自从 v2.43 以来的 curses 目录下的代码变化信息
git branch                      //不加任何后续参数,就表示让git列出所有已存在的分支。前面带“星号”的分支表示当前所在的分支。
   git branch br-name           //创建分支
   git branch stable V3         //建立一个基于 V3 的分支
   git branch -d br-name        //删除分支。-d,表示“在分支已经合并到主干后删除分支”，-D 的话,则表示“不论如何都删除分支”。
   git branch -a                //列出所有本地和远程分支
git checkout br-name                     //切换到某个分支。必须保证当前本分支处于 commit 状态,否则会报错。
   git checkout -b alsa-audio            //-b 用于建立一个新的分支,分支名称为 alsa-audio,并且转移到此分支
   git checkout — curses/ux_audio_oss.c  //用于取消对 curses/ux_audio_oss.c 文件的修改
git merge br-name                        //合并分支
git remote -v                            //查看远程仓库情况
gitk                                     //主干分支的图形化查看器
   gitk –since=”2 weeks ago” drivers/    //将在 GUI 中显示自 2 周前到现在为止的且位于drivers 目录下的分支记录信息
git clone src dst                        //克隆代码。clone 的话,是clone远端的当前分支。通俗的说,远端当前处在哪个分支,你clone来的就是哪个分支。
git pull src br-name                     //将远端的代码拉到本地分支
   git pull                              //从origin取出更新并合并到当前分支
git fetch /home/bob/myrepo master:bobworks //此命令意思是提取出 bob 修改的代码内容,然后放到我(rocrocket)工作目录下的 bobworks 分支中
git whatchanged -p master..bobworks        //用来查看 bob 都做了什么
git show commit-no                       //显式更详细的commit信息。也可以是分支号。或是HEAD，在后面加^表示看父亲。
git tag V3 5b888                         //打标签
git grep                                 //搜索内容
   git grep “print” V3                   //在 V3 中搜索所有的包含 print 的行
   git grep “print”                      //在所有的历史记录中搜索包含 print 的行
git reset –soft HEAD^                    //回复到上一次 commit 的代码。–soft 选项表示不改动 index file 和 working tree 中的内容
   git reset –hard ORIG_HEAD             //恢复到上一次的内容。
   git reset –                           //从 index file 中删除一个已登记的文件
git gc                                   //用垃圾回收机制清除由于 reset 而造成的垃圾代码
}}}

----
== git注意点 ==
{{{
git 维护的代码分成三部分,“当前工作目录”<->“index file”<->git 仓库。
git commit会将index file中的改变写到git仓库;
git add会将“当前工作目录”的改变写到“indexfile”;
“commit -a”则会直接将“当前工作目录”的改动同时写到“index file”和“git 仓库”。
将 Current working directory 记为 (1)
将 Index file 记为 (2)
将 Git repository 记为 (3)
他们之间的提交层次关系是 (1) -> (2) -> (3)
git add 完成的是(1) -> (2)
git commit 完成的是(2) -> (3)
git commit -a 两者的直接结合
从时间上看,可以认为(1)是最新的代码,(2)比较旧,(3)更旧
按时间排序就是 (1) <- (2) <- (3)
git diff 得到的是从(2)到(1)的变化
git diff –cached 得到的是从(3)到(2)的变化
git diff HEAD 得到的是从(3)到(1)的变化

git-init 命令会创建一个.git 隐藏目录。在.git 目录下,会创建 objects, refs/heads, refs/tags 和模板文件,与此同时,指向 master 分支的 HEAD 文件也会被创建。
如果在环境变量中定义了$GIT_DIR 变量,那么 git-init 就不会在./.git 目录下创建这些文件,而是在$GIT_DIR 所指定的目录下创建。
环境变量$GIT_OBJECT_DIRECTORY 是用来指示对象存储目录的路径的。如果设定了这个变量,则 SHA1目录将被创建在哪里。否则,SHA1目录会默认创建在$GIT_DIR/objects中。

git-clone 命令,主要负责克隆 git 仓库到另一个新目录中。
我们可以用如下的表示法来定义远程的一个 git 仓库:
rsync://host.xz/path/to/repo.git/
http://host.xz/path/to/repo.git/
https://host.xz/path/to/repo.git/
git://host.xz/path/to/repo.git/
git://host.xz/~user/path/to/repo.git/
ssh://[user@]host.xz[:port]/path/to/repo.git/
ssh://[user@]host.xz/path/to/repo.git/
ssh://[user@]host.xz/~user/path/to/repo.git/
ssh://[user@]host.xz/~/path/to/repo.git
如果 git 仓库在本地,那么可以这样表示:
/path/to/repo.git/
file:///path/to/repo.git/


   常量的使用方法
HEAD:表示最近一次的 commit。
MERGE_HEAD:如果是 merge 产生的 commit,那么它表示除 HEAD 之外的另一个父母分支。
FETCH_HEAD:使用 git-fetch 获得的 object 和 ref 的信息都存储在这里,这些信息是为日后 git-merge 准备的。
HEAD^:表示 HEAD 父母的信息
HEAD^^:表示 HEAD 父母的父母的信息
HEAD~4:表示 HEAD 上溯四代的信息
HEAD^1:表示 HEAD 的第一个父母的信息
HEAD^2:表示 HEAD 的第二个父母的信息
COMMIT_EDITMSG:最后一次 commit 时的提交信息。

   git pull 的用法至少有四种
1. git clone之后用git pull来同步;
2. git pull.来替代git merge命令;
3. git pull /path/to/repo,将运程仓库的内容直接 merge到当前分支中。
4. git pull/path/to/repo后面加上<src>:<dst>来指定源的分支和本地分支。

   git reset
1. –soft 表示只撤销commit,而保留working tree和index file的信息
2. –mixed会撤销commit和index file,只保留working tree的信息
3. –hard表示将working tree和index file都撤销到以前状态。
}}}

----
== 使用经验 ==
* 查看代码在哪个分支
{{{
  git log        ###获取SHA码
  git branch -r --contain SHA
}}}

* 回退到某个时间点
{{{
git log --pretty=%H --until="2014-08-19 0:0:0" -1 | xargs git checkout
repo forall -c 'a=`git log --pretty=%H --until="2014-10-21 14:17:29" -1`;git checkout $a'
}}}

* 根据本地代码生成mainifest.xml
{{{
repo manifest -o ~/manifest.xml -r
}}}

----
== 遇到的问题 ==
* repo sync
{{{
在repo sync出现error: .repo/manifests/: contains uncommitted changes
这是由于服务器上的default.xml有变化，需要
git reset --hard HEAD
repo sync把这个文件更新完停止，或者用git fetch命令取下最新的文件，再修改成上海的镜像路径
}}}

----
== 图解常用命令 ==
{{local:images/git_command.png}}

----
== 网络资料 ==
[[http://nettedfish.sinaapp.com/blog/2013/08/05/deep-into-git-with-diagrams/|图解GIT]]

----
== 附件 ==
[[local:files/generate_patch.sh|generate_patch.sh]]</BR>
[[local:files/tig|tig]]</BR>

