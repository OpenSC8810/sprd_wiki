diff --git a/drivers/cpufreq/cpufreq_interactive.c b/drivers/cpufreq/cpufreq_interactive.c
index a66748e..bca7ee6 100644
--- a/drivers/cpufreq/cpufreq_interactive.c
+++ b/drivers/cpufreq/cpufreq_interactive.c
@@ -339,7 +339,10 @@ static unsigned int choose_freq(
 	return freq;
 }
 
-static u64 update_load(int cpu)
+static u64 update_load(int cpu,
+		u64* oi, u64* ci, unsigned int* di,
+		u64* on, u64* cn, unsigned int* dn,
+		u64* osa, u64* at, int* cf)
 {
 	struct cpufreq_interactive_cpuinfo *pcpu = &per_cpu(cpuinfo, cpu);
 	u64 now;
@@ -357,6 +360,17 @@ static u64 update_load(int cpu)
 	else
 		active_time = delta_time - delta_idle;
 
+	if (oi) {
+		*oi = pcpu->time_in_idle;
+		*ci = now_idle;
+		*di = delta_idle;
+		*on = pcpu->time_in_idle_timestamp;
+		*cn = now;
+		*dn = delta_time;
+		*osa = pcpu->cputime_speedadj;
+		*at = active_time;
+		*cf = pcpu->policy->cur;
+	}
 	pcpu->cputime_speedadj += active_time * pcpu->policy->cur;
 
 	pcpu->time_in_idle = now_idle;
@@ -372,11 +386,15 @@ static void cpufreq_interactive_timer(unsigned long data)
 	int cpu_load;
 	struct cpufreq_interactive_cpuinfo *pcpu =
 		&per_cpu(cpuinfo, data);
-	unsigned int new_freq;
-	unsigned int loadadjfreq;
+	unsigned int new_freq, new_freq1;
+	unsigned int loadadjfreq, target_freq;
 	unsigned int index;
 	unsigned long flags;
 	bool boosted;
+	u64 oi, ci, on, cn;
+	unsigned int di, dn;
+	u64 osa, at;
+	int cf;
 
 	if (!down_read_trylock(&pcpu->enable_sem))
 		return;
@@ -384,7 +402,7 @@ static void cpufreq_interactive_timer(unsigned long data)
 		goto exit;
 
 	spin_lock_irqsave(&pcpu->load_lock, flags);
-	now = update_load(data);
+	now = update_load(data, &oi, &ci, &di, &on, &cn, &dn, &osa, &at, &cf);
 	delta_time = (unsigned int)(now - pcpu->cputime_speedadj_timestamp);
 	cputime_speedadj = pcpu->cputime_speedadj;
 	spin_unlock_irqrestore(&pcpu->load_lock, flags);
@@ -395,6 +413,7 @@ static void cpufreq_interactive_timer(unsigned long data)
 	do_div(cputime_speedadj, delta_time);
 	loadadjfreq = (unsigned int)cputime_speedadj * 100;
 	cpu_load = loadadjfreq / pcpu->target_freq;
+	target_freq = pcpu->target_freq;
 	boosted = boost_val || now < boostpulse_endtime;
 
 	if (cpu_load >= go_hispeed_load || boosted) {
@@ -410,6 +429,8 @@ static void cpufreq_interactive_timer(unsigned long data)
 		new_freq = choose_freq(pcpu, loadadjfreq);
 	}
 
+	new_freq1 = new_freq;
+
 	if (pcpu->target_freq >= hispeed_freq &&
 	    new_freq > pcpu->target_freq &&
 	    now - pcpu->hispeed_validate_time <
@@ -462,6 +483,19 @@ static void cpufreq_interactive_timer(unsigned long data)
 		goto rearm_if_notmax;
 	}
 
+printk("~~~ oi=%llu, ci=%llu, di=%d, on=%llu, cn=%llu, dn=%d, osa=%llu, at=%llu, cf=%d%\n",
+		oi, ci, di, on, cn, dn, osa, at, cf);
+printk("~~~ ocs=%llu, dt=%d, cs=%llu, lf=%u, tf=%u, cl=%d, nf1=%u, nf=%u \n",
+		pcpu->cputime_speedadj,
+		delta_time,
+		cputime_speedadj,
+		loadadjfreq,
+		target_freq,
+		cpu_load,
+		new_freq1,
+		new_freq
+		);
+
 	trace_cpufreq_interactive_target(data, cpu_load, pcpu->target_freq,
 					 pcpu->policy->cur, new_freq);
 
@@ -669,7 +703,7 @@ static int cpufreq_interactive_notifier(
 				}
 			}
 			spin_lock_irqsave(&pjcpu->load_lock, flags);
-			update_load(cpu);
+			update_load(cpu, 0,0,0,0,0,0,0,0,0);
 			spin_unlock_irqrestore(&pjcpu->load_lock, flags);
 			if (cpu != freq->cpu)
 				up_read(&pjcpu->enable_sem);
