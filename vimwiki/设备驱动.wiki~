%toc 目录

----
== 创建属性文件节点 ==
* 方式一
{{{
static ssize_t regulator_uV_show(struct device *dev,
                struct device_attribute *attr, char *buf)
{
    struct regulator_dev *rdev = dev_get_drvdata(dev);
    ssize_t ret; 

    mutex_lock(&rdev->mutex);
    ret = sprintf(buf, "%d\n", _regulator_get_voltage(rdev));
    mutex_unlock(&rdev->mutex);

    return ret; 
}
static DEVICE_ATTR(microvolts, 0444, regulator_uV_show, NULL);

static int add_regulator_attributes(struct regulator_dev *rdev)
{
    device_create_file(dev, &dev_attr_microvolts);
}
}}}

* 方式二
{{{

static ssize_t reg_show_state(struct device *dev,
              struct device_attribute *attr, char *buf)
{            
    struct userspace_consumer_data *data = dev_get_drvdata(dev);

    if (data->enabled)
        return sprintf(buf, "enabled\n");
             
    return sprintf(buf, "disabled\n");
}   
    
static ssize_t reg_set_state(struct device *dev, struct device_attribute *attr,
             const char *buf, size_t count)
{   
    ....
    return count;
}           

static DEVICE_ATTR(state, 0644, reg_show_state, reg_set_state);

static struct attribute *attributes[] = {
    &dev_attr_state.attr,
    NULL,
};  

static const struct attribute_group attr_group = {
    .attrs  = attributes,
};  

static int regulator_userspace_consumer_probe(struct platform_device *pdev)
{
    ret = sysfs_create_group(&pdev->dev.kobj, &attr_group);
    if (ret != 0)
        return ret;
        
    return ret;
}           
}}}

----
== kernel传递参数 ==
{{{
bool should_reset_fgu = 0;

static int __init need_reset_fgu(char *str)
{
	printk("~~~~~  %s %d\n", __FUNCTION__, __LINE__);
	should_reset_fgu = 1;
	return 1;
}

__setup("reset_fgu", need_reset_fgu);
}}}

----
== 网络资料 ==
[http://bbs.chinaunix.net/tree/index_402_1/ ChinaUnix驱动程序资料]\\
[http://www.cnblogs.com/andtt/articles/2178905.html Linux设备驱动程序学习]\\
